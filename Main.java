package com.company;

import java.util.Arrays;
import java.util.Collections;
import java.util.Vector;

public class Main
{
    void printArr(int[] arr)
    {
        for (int i = 0; i < arr.length; i++)
        {
            System.out.print(arr[i] + " ");
        }
    }

    public static void main(String[] args)
    {
        Main m = new Main();
        int arr[] = {826, 47, 553, 751, 733, 68, 316, 342, 221, 101, 469, 252, 811, 657, 141, 690, 477, 121, 664, 943, 309, 900, 499, 599, 942, 885, 373, 675, 959, 182, 840, 600, 238, 60, 122, 752, 166, 528, 270, 398, 762, 498, 989, 112, 485, 902, 512, 573, 391, 287, 561, 760, 244, 163, 571, 119, 277, 1000, 383, 25, 944, 84, 521, 833, 197, 83, 719, 696, 345, 470, 890, 489, 953, 177, 239, 718, 629, 977, 784, 15, 680, 205, 178, 70, 5, 405, 228, 983, 954, 685, 418, 404, 547, 468, 440, 303, 728, 810, 523, 858, 891, 435,
                209, 525, 274, 35, 190, 770, 975, 235, 816, 115, 236, 549, 598, 476, 934, 79, 246, 868, 308, 45, 223, 271, 558, 606, 623, 46, 505, 168, 215, 199, 140, 999, 7, 644, 161, 722, 264, 550, 630, 426, 579, 41, 613, 870, 757, 985, 866, 783, 663, 91, 59, 767, 354, 842, 467, 940, 456, 120, 594, 463, 428, 853, 36, 344, 998, 723, 991, 917, 661, 638, 148, 582, 506, 714, 782, 14, 595, 295, 170, 349, 871, 873, 765, 423, 839, 484, 927, 225, 147, 462, 800, 532, 962, 824, 179, 42, 183, 453, 11, 425, 539, 592, 106, 320,
                146, 604, 727, 583, 684, 773, 949, 374, 40, 808, 777, 796, 545, 337, 361, 491, 683, 417, 951, 129, 822, 529, 761, 974, 229, 652, 81, 534, 384, 198, 990, 825, 611, 748, 457, 524, 501, 923, 869, 889, 694, 434, 948, 78, 642, 222, 455, 350, 410, 724, 586, 887, 23, 711, 848, 846, 682, 135, 908, 852, 265, 628, 755, 593, 716, 795, 114, 184, 838, 71, 982, 133, 461, 105, 185, 646, 324, 34, 679, 234, 128, 473, 208, 741, 537, 58, 173, 137, 330, 588, 978, 450, 530, 551, 322, 585, 626, 584, 670, 431, 459, 396, 253,
                935, 230, 857, 220, 483, 971, 279, 325, 928, 380, 746, 175, 145, 930, 305, 32, 516, 293, 13, 348, 362, 38, 490, 563, 500, 33, 298, 240, 710, 328, 95, 608, 828, 420, 369, 882, 126, 386, 474, 691, 686, 781, 798, 125, 972, 878, 910, 289, 713, 332, 938, 939, 154, 729, 437, 439, 577, 338, 612, 699, 860, 737, 780, 452, 189, 488, 52, 706, 957, 911, 791, 152, 471, 776, 674, 526, 504, 53, 480, 258, 195, 835, 375, 408, 883, 820, 409, 753, 475, 8, 314, 341, 366, 433, 502, 370, 518, 162, 779, 465, 62, 979, 884, 61,
                859, 851, 387, 821, 759, 186, 876, 24, 764, 799, 379, 805, 10, 654, 834, 662, 742, 542, 519, 432, 936, 789, 705, 707, 109, 359, 188, 1, 945, 650, 97, 443, 541, 775, 641, 880, 567, 513, 572, 981, 19, 673, 429, 2, 815, 20, 108, 750, 143, 55, 237, 447, 774, 725, 117, 862, 73, 226, 963, 715, 478, 347, 615, 449, 203, 288, 624, 294, 855, 389, 249, 740, 899, 643, 376, 150, 809, 57, 299, 559, 817, 416, 818, 634, 617, 601, 888, 1838, 1782, 1248, 1623, 1401, 1215, 1140, 1663, 1770, 1688, 1166, 1573, 1102, 1586,
                1537, 1823, 1953, 1886, 1376, 1032, 1453, 1300, 1778, 1147, 1583, 1750, 1622, 1350, 1465, 1311, 1694, 1009, 1921, 1360, 1230, 1457, 1699, 1641, 1113, 1426, 1431, 1515, 1324, 1881, 1071, 1918, 1671, 1083, 1472, 1832, 1359, 1039, 1421, 1236, 1498, 1222, 1246, 1720, 1160, 1480, 1167, 1263, 1174, 1614, 1196, 1058, 1982, 1245, 1328, 1793, 1729, 1644, 1812, 1250, 1354, 1783, 1647, 1669, 1260, 1690, 1205, 1329, 1352, 1836, 1318, 1066, 1369, 1305, 1970, 1337, 1479, 1072, 1471, 1435, 1468, 1273, 1320, 1278, 1942,
                1259, 1636, 1069, 1913, 1076, 1031, 1909, 1038, 1161, 1396, 1626, 1585, 1503, 1864, 1420, 1506, 1762, 1030, 1548, 1522, 1163, 1152, 1135, 1093, 1704, 1094, 1124, 1286, 1646, 1193, 1122, 1819, 1841, 1134, 1231, 1542, 1635, 1232, 1860, 1007, 1596, 1887, 1715, 1599, 1049, 1047, 1099, 1871, 1923, 1168, 1367, 1703, 1984, 1919, 1119, 1372, 1543, 1572, 1980, 1022, 1517, 1717, 1640, 1228, 1476, 1183, 1616, 1589, 1301, 1938, 1738, 1630, 1824, 1371, 1036, 1276, 1728, 1582, 1438, 1332, 1930, 1254, 1267, 1557, 1213,
                1014, 1732, 1208, 1809, 1661, 1261, 1120, 1296, 1851, 1195, 1741, 1270, 1181, 1444, 1859, 1894, 1241, 1402, 1339, 1794, 1368, 1156, 1463, 1966, 1804, 1475, 1745, 1814, 1868, 1293, 1937, 1239, 1845, 1591, 1795, 1370, 1123, 1712, 1309, 1478, 1829, 1676, 1433, 1779, 1179, 1901, 1716, 1018, 1910, 1013, 1108, 1530, 1172, 1574, 1201, 1487, 1684, 1312, 1974, 1607, 1955, 1294, 1571, 1808, 1564, 1692, 1995, 1945, 1536, 1862, 1935, 1466, 1651, 1500, 1291, 1724, 1362, 1546, 1265, 1116, 1520, 1771, 1897, 1872, 1987,
                1434, 1508, 1565, 1336, 1884, 1986, 1004, 1780, 1364, 1797, 1697, 1395, 1581, 1042, 1097, 1926, 1898, 1609, 1726, 1579, 1048, 1858, 1200, 1081, 1002, 1944, 1541, 1005, 1719, 1906, 1357, 1385, 1652, 1064, 1877, 1681, 1321, 1929, 1810, 1101, 1525, 1761, 1262, 1558, 1900, 1603, 1315, 1092, 1281, 1198, 1243, 1746, 1951, 1010, 1507, 1400, 1602, 1677, 1789, 1628, 1380, 1889, 1126, 1308, 1045, 1391, 1742, 1251, 1136, 1390, 1835, 1667, 1514, 1189, 1680, 1928, 1415, 1398, 1798, 1348, 1875, 1706, 1994, 1678, 1340,
                1744, 1708, 1570, 1834, 1429, 1853, 1952, 1933, 1033, 1521, 1142, 1805, 1567, 1973, 1826, 1629, 1346, 1683, 1184, 1056, 1998, 1785, 1481, 1427, 1304, 1074, 1177, 1561, 1351, 1895, 1073, 1806, 1931, 1467, 1991, 1526, 1322, 1608, 1019, 1764, 1298, 1496, 1772, 1992, 1497, 1185, 1419, 1979, 1916, 1754, 1958, 1117, 1846, 1414, 1593, 1432, 1114, 1482, 1237, 1288, 1084, 1139, 1773, 1600, 1012, 1749, 1067, 1954, 1477, 1389, 1796, 1983, 1342, 1559, 1182, 1233, 1155, 1494, 1015, 1353, 1619, 1896, 1911, 1325, 1407,
                1095, 1566, 1256, 1621, 1106, 1518, 1682, 1137, 1162, 1769, 1653, 1756, 1673, 1837, 1960, 1052, 1597, 1026, 1118, 1170, 1733, 1576, 1252, 1788, 1967, 1903, 1178, 1532, 1331, 1842, 1650, 1766, 1618, 1611, 1784, 1486, 1078, 1963, 1425,
                1505, 1816, 1588, 1617, 1060, 1675, 1948, 1416, 1850, 1277, 1366, 1892, 1949, 1006, 1649, 1210, 1828, 1791, 1821, 1130, 1531, 1029, 2103, 2024, 2963, 2451, 2229, 2310, 2770, 2775, 2756, 2214, 2540, 2045, 2233, 2748, 2191, 2283, 2660, 2072, 2093, 2734, 2673, 2486, 2452, 2656, 2313, 2981, 2324, 2061, 2347, 2262, 2644, 2114, 2429, 2009, 2381, 2575, 2993, 2337, 2889, 2476, 2161, 2558, 2291, 2979, 2501, 2789, 2036, 2025, 2259, 2176, 2727, 2782, 2506, 2833, 2922, 2838, 2465, 2933, 2537, 2960, 2667, 2626, 2443, 2232, 2518, 2811, 2226, 2834, 2544, 2203, 2037, 2574, 2412, 2292, 2265, 2057, 2083, 2579, 2609, 2712, 2362, 2946, 2509, 2416, 2737, 2457, 2041, 2914, 2464, 2175, 2760, 2669, 2478, 2195, 2211, 2428, 2128, 2650, 2199, 2393, 2005, 2295, 2710, 2477, 2458, 2004, 2157, 2605, 2672, 2788, 2978, 2735, 2823, 2862, 2308, 2315, 2459, 2125, 2875, 2918, 2927, 2468, 2136, 2947, 2923, 2348, 2110, 2204, 2407, 2883, 2613, 2615, 2231, 2814, 2434, 2931, 2086, 2261, 2148, 2322, 2293, 2205, 2280, 2757, 2427, 2674, 2702, 2675, 2738, 2228, 2305, 2021, 2296, 2439, 2511, 2069, 2566, 2745, 2578, 2052, 2018, 2238, 2990, 2701, 2890, 2123, 2479, 2534, 2975, 2717, 2084, 2170, 2430, 2636, 2112, 2646, 2670, 2314, 2938, 2432, 2774, 2153, 2950, 2039, 2902, 2885, 2828, 2053, 2503, 2309, 2288, 2966, 2209, 2425, 2001, 2620, 2908, 2438, 2664, 2263, 2740, 2286, 2349, 2724, 2134, 2267, 2541, 2588, 2569, 2461, 2780, 2681, 2332, 2284, 2217, 2252, 2027, 2657, 2698, 2277, 2138, 2997, 2155, 2055, 2959, 2779, 2188, 2502, 2827, 2032, 2642, 2925, 2067, 2548, 2187, 2467, 2289, 2886, 2105, 2623, 2160, 2200, 2989, 2098, 2130, 2000, 2131, 2375, 2552, 2162, 2318, 2568, 2899, 2390, 2106, 2643, 2843, 2857, 2957, 2884, 2577, 2553, 2437, 2639, 2094, 2100, 2964, 2042, 2202, 2865, 2281, 2585, 2080, 2969, 2796, 2819, 2116, 2245, 2227, 2056, 2513, 2871, 2662, 2638, 2140, 2208, 2190, 2830, 2718, 2874, 2521, 2366, 2260, 2104, 2079, 2892, 2777, 2676, 2033, 2147, 2095, 2555, 2328, 2564, 2848, 2303, 2350, 2066, 2986, 2396, 2339, 2570, 2172, 2565, 2266, 2647, 2282, 2006, 2076, 2911, 2806, 2012, 2829, 2368, 2617, 2371, 2601, 2043, 2492, 2763, 2998, 2490, 2930, 2530, 2097, 2426, 2234, 2278, 2423, 2379, 2912, 2003, 2472, 2239, 2869, 2729, 2354, 2692, 2092, 2818, 2571, 2952, 2658, 2373, 2866, 2408, 2085, 2475, 2532, 2954, 2606, 2255, 2480, 2949, 2256, 2171, 2369, 2529, 2593, 2356, 2367, 2747, 2248, 2151, 2678, 2821, 2210, 2446, 2312, 2075, 2723, 2035, 2953, 2273, 2888, 2976, 2219, 2121, 2040, 2611, 2456, 2732, 2397, 2264, 2873, 2545, 2519, 2868, 2494, 2720, 2118, 2665, 2178, 2751, 2551, 2271, 2070, 2146, 2435, 2677, 2507, 2714, 2372, 2127, 2711, 2364, 2586, 2101, 2992, 2909, 2133, 2608, 2450, 2329, 2342, 2948, 2942, 2536, 2517, 2995, 2274, 2270, 2319, 2527, 2542, 2212, 2064, 2721, 2616, 2149, 2365, 2898, 2454, 2936, 2113, 2402, 2156, 2413, 2597, 2186, 2671, 2983, 2762, 2666, 2840, 2641, 2307, 2809, 2068, 2783, 2985, 2399, 2554, 2951, 2290, 2825, 2800, 2471, 2832, 2096, 2143, 2378, 2078, 2991, 2321, 2158, 2994, 2879, 2791, 2815, 2050, 2561, 2876, 2695, 2254, 2977, 2424, 2287, 2336, 2139, 2470, 2447, 2117, 2034, 2192, 2499, 2523, 2528, 2250, 2405
        };
        //int arr[]={35,56,3,5,1,45,9,2,34,48,15,67,18};
        //int arr[]={17, 10, 18, 49, 30, 14, 38, 12, 40, 29};
        int n = arr.length;

        BucketSort ms = new BucketSort();
        int max=ms.maxValue(arr);
        //ms.sortArr(arr);

        System.out.println("After sorting:");
        m.printArr(ms.sortArr(arr,max));
        //m.printArr(arr);
    }
}

/*class TimSort
{
    static int RUN=32;

    void insertionSort(int[] arr, int left, int right)
    {
        for (int i = left + 1; i <= right; i++)
        {
            int temp = arr[i];
            int j = i - 1;
            while (arr[j] > temp && j >= left)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = temp;
        }
    }

    void merge(int[] arr, int l, int m, int r)
    {
        int len1 = m - l + 1, len2 = r - m;
        int[] left = new int[len1];
        int[] right = new int[len2];
        for (int x = 0; x < len1; x++)
        {
            left[x] = arr[l + x];
        }
        for (int x = 0; x < len2; x++)
        {
            right[x] = arr[m + 1 + x];
        }

        int i = 0;
        int j = 0;
        int k = l;

        while (i < len1 && j < len2)
        {
            if (left[i] <= right[j])
            {
                arr[k] = left[i];
                i++;
            }
            else
            {
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        while (i < len1)
        {
            arr[k] = left[i];
            k++;
            i++;
        }

        while (j < len2)
        {
            arr[k] = right[j];
            k++;
            j++;
        }
    }

    void sortArr(int[] arr, int n)
    {
        for (int i = 0; i < n; i += RUN)
        {
            insertionSort(arr, i, Math.min((i + 31), (n - 1)));
        }
        for (int size = RUN; size < n; size = 2 * size)
        {
            for (int left = 0; left < n; left += 2 * size)
            {
                int mid = left + size - 1;
                int right = Math.min((left + 2 * size - 1), (n - 1));
                merge(arr, left, mid, right);
            }
        }
    }
}*/

class QuickSort
{
    public int partition(int[] arr, int low, int high)
    {
        int pivot = arr[high];
        int i = (low-1);
        for (int j=low; j<high; j++)
        {
            if (arr[j] <= pivot)
            {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;

        return i+1;
    }
    void sortArr(int[] arr, int low, int high)
    {
        if(low<high)
        {
            int pivot=partition(arr, low, high);

            sortArr(arr, low, pivot-1);
            sortArr(arr, pivot+1, high);
        }
    }
}

class SelectionSort
{
    public void sortArr(int[] arr)
    {
        int n = arr.length;

        for (int i = 0; i < n-1; i++)
        {
            int min_idx = i;
            for (int j = i+1; j < n; j++)
            {
                if (arr[j] < arr[min_idx])
                {
                    min_idx = j;
                }
                int temp = arr[min_idx];
                arr[min_idx] = arr[i];
                arr[i] = temp;
            }
        }

    }
}

class InsertionSort
{
    public void sortArr(int[] arr, int n)
    {
        int i, key, j;
        for (i = 1; i < n; i++)
        {
            key = arr[i];
            j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }
}


class BubbleSort
{
    public void sortArr(int[] arr)
    {
        for(int i=0; i<arr.length; i++)
        {
            for(int j=0; j<arr.length-1-i; j++)
            {
                if(arr[j]>arr[j+1])
                {
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
    }
}

class MergeSort
{
    void merge(int[] arr, int l, int m, int r)
    {
        int n1=m-l+1;
        int n2=r-m;

        int L[]=new int[n1];
        int R[]=new int[n2];

        for(int i=0; i<n1; i++)
        {
            L[i]=arr[l+i];
        }
        for(int j=0; j<n2; j++)
        {
            R[j]=arr[m+1+j];
        }

        int i=0; int j=0;
        int k=l;
        while(i<n1 && j<n2)
        {
            if(L[i]<=R[j])
            {
                arr[k]=L[i];
                i++;
            }
            else
            {
                arr[k]=R[j];
                j++;
            }
            k++;
        }
        while(i<n1)
        {
            arr[k]=L[i];
            i++;
            k++;
        }
        while(j<n2)
        {
            arr[k]=R[j];
            j++;
            k++;
        }
    }

    void sortArr(int[] arr,int l, int r)
    {
        if(l<r)
        {
            int m=(l+r)/2;

            sortArr(arr,l,m);
            sortArr(arr,m+1,r);

            merge(arr,l,m,r);
        }
    }
}

class Heapsort {
    void sortArr(int[] arr) {
        int n = arr.length;

        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        for (int i = n - 1; i >= 0; i--) {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            heapify(arr, i, 0);
        }
    }

    void heapify(int arr[], int n, int i) {
        int largest = i;
        int l = 2 * i + 1;
        int r = 2 * i + 2;

        if (l < n && arr[l] > arr[largest])
            largest = l;

        if (r < n && arr[r] > arr[largest])
            largest = r;

        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            heapify(arr, n, largest);
        }
    }
}

class BucketSort
{
    int[] sortArr(int[] arr, int maxValue)
    {
        int[] Bucket = new int[maxValue + 1];
        int[] sorted_sequence = new int[arr.length];

        for (int i = 0; i < arr.length; i++)
            Bucket[arr[i]]++;

        int outPos = 0;
        for (int i = 0; i < Bucket.length; i++)
            for (int j = 0; j < Bucket[i]; j++)
                sorted_sequence[outPos++] = i;

        return sorted_sequence;
    }
    int maxValue(int[] arr)
    {
        int maxValue = 0;
        for (int i = 0; i < arr.length; i++)
            if (arr[i] > maxValue)
                maxValue = arr[i];
        return maxValue;
    }
}